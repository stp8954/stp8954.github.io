[{"body":"","link":"https://example.com/","section":"","tags":null,"title":""},{"body":"","link":"https://example.com/tags/ai/","section":"tags","tags":null,"title":"AI"},{"body":"","link":"https://example.com/categories/","section":"categories","tags":null,"title":"Categories"},{"body":"","link":"https://example.com/categories/general/","section":"categories","tags":null,"title":"General"},{"body":"","link":"https://example.com/series/general/","section":"series","tags":null,"title":"General"},{"body":"","link":"https://example.com/tags/index/","section":"tags","tags":null,"title":"Index"},{"body":"","link":"https://example.com/tags/interview-preparation/","section":"tags","tags":null,"title":"Interview Preparation"},{"body":"Hello, world.\nIf you've ever typed \u0026quot;how to prepare for a Machine Learning Engineer interview\u0026quot; into a search bar, you know the feeling. It's like standing at the base of a mountain covered in fog. The path isn't clear, and the peak seems impossibly far away.\nThe list of required skills is daunting. Unlike interviews for SDE, the industry has not standardized the interview process for MLE roles. In fact, they don’t even agree on what an MLE should be. You need to be a solid software engineer, fluent in algorithms and data structures. You need to be a practical scientist, with a deep intuition for model mechanics, from linear regression to transformers. And on top of all that, you need to be an architect, capable of designing large-scale, distributed systems that can serve models to millions of users.\nIt’s a lot. And frankly, a scattered approach of randomly doing LeetCode problems and taking courses won't cut it.\nI started my interview prep journey early this year and went through multiple interview rounds at large and medium sized companies (Lyft, Netflix, Meta, Chewy, Expedia, Atlassian). Converted 2 and made it to the last round of the rest. It was not easy to switch from an SDE to an MLE role and learned a lot during that phase. I plan to take another shot at some of those again later in the year and I’ve decided to do it in the open. I feel that the best way to learn is to teach, and the best way to stay accountable is to have a public plan. This blog is that plan. My goal is to create a structured, comprehensive resource based on the interviews I went through so far so I can follow it in the future, and that I hope can serve as a guide for anyone else on the same path.\nThe Game Plan I dont have the details figured out yet, but am thinking on publishing in multiple tracks.\nTrack 1: The Practice Loop (Weekly)This is our bread and butter. Every week, we'll tackle the fundamentals with a \u0026quot;workout\u0026quot; consisting of:\nCoding Problems: 2-3 LeetCode-style problems (a mix of mediums and hards) focusing on patterns crucial for tech interviews. This will be mostly resources to some really good explanations on YouTube and other blogs\nML Concepts (Q\u0026amp;A): A few \u0026quot;flashcard-style\u0026quot; questions and answers covering core ML theory. Think: \u0026quot;Explain the bias-variance tradeoff,\u0026quot; or \u0026quot;What is label leakage and how do you prevent it?\u0026quot;\nML Coding Challenge: A hands-on problem like \u0026quot;Implement logistic regression from scratch using NumPy\u0026quot; or \u0026quot;Code a custom K-Fold cross-validator.\u0026quot;\nTrack 2: From Paper to Practice (Weekly)Top engineers stay current. In this track, we'll dissect one influential paper a week, focusing on foundational work in NLP, Ranking, or Recommender Systems. We won't just summarize it; we'll follow a rigorous \u0026quot;three-pass\u0026quot; methodology to understand its core contribution and even try to replicate its key ideas in code.\nTrack 3: The ML System Design Blueprint (Bi-weekly)This is where we connect theory to production. Every two weeks, we'll tackle a classic ML system design prompt, like \u0026quot;Design a News Feed Ranker,\u0026quot; \u0026quot;Design YouTube Recommendations,\u0026quot; or \u0026quot;Design a system for detecting hate speech.\u0026quot; We'll whiteboard the architecture, discuss trade-offs, and detail everything from data ingestion to model serving and monitoring.\nTrack 4: The Foundations of Scale (Bi-weekly)An ML system is still a system. This track runs parallel to the one above but focuses on general, non-ML system design. We'll tackle problems like \u0026quot;Design a URL Shortener\u0026quot; or \u0026quot;Design a Distributed Message Queue.\u0026quot; This builds the foundational software engineering muscle needed to operate at scale.\nTrack 5: The Builder's Log (As it happens)This is my freestyle track. Whenever I learn something new, build a small side project, or have a thought on the industry, I'll post it here. It's for the joy of building and the spirit of continuous learning.\nLet's Build Together\nThis roadmap is ambitious, but the journey to becoming a top-tier ML engineer is supposed to be. I'm putting this out there not as an expert who has all the answers, but as a fellow builder on the path, documenting the climb.\nI invite you to follow along. Challenge my solutions. Suggest papers to review or design problems to tackle in the comments. Let's turn this solitary study grind into a collaborative workshop.\nReady to get started? The first workout from the Practice Loop drops next Sunday (06/29/2025).\nLet's do this.\n","link":"https://example.com/post/introduction/","section":"post","tags":["ML","AI","ML Engineering","Interview Preparation"],"title":"Introduction"},{"body":"","link":"https://example.com/tags/ml/","section":"tags","tags":null,"title":"ML"},{"body":"","link":"https://example.com/categories/ml-engineering/","section":"categories","tags":null,"title":"ML Engineering"},{"body":"","link":"https://example.com/tags/ml-engineering/","section":"tags","tags":null,"title":"ML Engineering"},{"body":"","link":"https://example.com/post/","section":"post","tags":["index"],"title":"Posts"},{"body":"","link":"https://example.com/series/","section":"series","tags":null,"title":"Series"},{"body":"","link":"https://example.com/tags/","section":"tags","tags":null,"title":"Tags"},{"body":"","link":"https://example.com/tags/hugo/","section":"tags","tags":null,"title":"Hugo"},{"body":"","link":"https://example.com/categories/syntax/","section":"categories","tags":null,"title":"Syntax"},{"body":"","link":"https://example.com/series/themes-guide/","section":"series","tags":null,"title":"Themes Guide"},{"body":"Page bundles are an optional way to organize page resources within Hugo.\nYou can opt-in to using page bundles in Hugo Clarity with usePageBundles in your site configuration or in a page's front matter. Read more about usePageBundles.\nWith page bundles, resources for a page or section, like images or attached files, live in the same directory as the content itself rather than in your static directory.\nHugo Clarity supports the use of leaf bundles, which are any directories within the content directory that contain an index.md file. Hugo's documentation gives this example:\n1content 2├── about 3│ ├── index.md 4├── posts 5│ ├── my-post 6│ │ ├── content1.md 7│ │ ├── content2.md 8│ │ ├── image1.jpg 9│ │ ├── image2.png 10│ │ └── index.md 11│ └── my-other-post 12│ └── index.md 13│ 14└── another-section 15 ├── .. 16 └── not-a-leaf-bundle 17 ├── .. 18 └── another-leaf-bundle 19 └── index.md In the above example `content` directory, there are four leaf bundles: about: This leaf bundle is at the root level (directly under content directory) and has only the index.md.\nmy-post: This leaf bundle has the index.md, two other content Markdown files and two image files. image1 is a page resource of my-post and only available in my-post/index.md resources. image2 is a page resource of my-post and only available in my-post/index.md resources.\nmy-other-post: This leaf bundle has only the index.md.\nanother-leaf-bundle: This leaf bundle is nested under couple of directories. This bundle also has only the index.md.\nThe hierarchy depth at which a leaf bundle is created does not matter, as long as it is not inside another leaf bundle.\nAdvantages to using page bundles The image below is part of the bundle of this page, and is located at content/post/bundle/building.png. Because it's within this page's bundle, the markup for the image only has to specify the image's filename, building.png.\nIf you ever change the name of the directory in which this Markdown file and the image reside, the reference to the image would not need to be updated.\nIn addition to more cleanly organizing your content and related assets, when using page bundles, Hugo Clarity will automatically generate markup for modern image formats, which are smaller in file size.\nFor instance, when you reference an image like building.png, Hugo Clarity will check to see if the same image (based on filename) exists in WebP, AVIF or JXL formats. If you inspect the image above, you'll see a \u0026lt;source\u0026gt; element for building.webp, because that file is also present. Hugo Clarity will only include the markup if these images exist.\nBrowsers that support these formats and the \u0026lt;picture\u0026gt; element will load them, while browsers that do not will fall-back to the default image. Read more about this process.\nFinally, note that page assets can be further managed and refined within the page's front matter if you wish, and are not limited to images alone.\nDisadvantages to using page bundles Page resources in a bundle are only available to the page with which they are bundled — that means you can't include an image with one page and then reference it from another.\nImages that are being used in multiple places are more appropriate for your Hugo assets directory. Unlike files in the Hugo static directory, files in the assets directory can be run through Hugo Pipes, which includes image processing.\n","link":"https://example.com/post/bundle/","section":"post","tags":["Hugo"],"title":"Using Hugo page bundles"},{"body":"\r","link":"https://example.com/post/map/","section":"post","tags":null,"title":"Using OpenStreetMap"},{"body":"The \u0026quot;Notices\u0026quot; shortcode enables you to call out pieces of information - sidebars, warnings, tips, etc.\nTo create a notice on a page, you can use the notice shortcode.\nYou use the notice shortcode, with the first parameter being one of note, info, tip, and warning. Then add a title for your note in quotes as the second parameter. The inner body of the note can be whatever markdown you want to create.\nThe following shortcode syntax within a markdown doc:\n1{{% notice note \u0026#34;Note\u0026#34; %}} 2This is a standard \u0026#34;note\u0026#34; style. 3{{% /notice %}} will render as:\nNote This is a standard \u0026quot;note\u0026quot; style.\nThe other three variants follow.\nInfo Here is the \u0026quot;info\u0026quot; style.\nTip Here is a \u0026quot;tip\u0026quot; variant of a notice.\nWarning Here is the \u0026quot;warning\u0026quot; flavor of a notice.\nAlso note that the content of a notice can contain anything you could put on a normal page - as shown below:\nComplex Notices are Possible! This is a notice that has a lot of various kinds of content in it.\nHere is a bulleted list With more than one bullet And even more than one level Code blocks are fine here, too....\n1public void SayHello() 2{ 3 Console.WriteLine(\u0026#34;Hello, world!\u0026#34;); 4} Productivity Booster! If you're using VS Code for your editing, copy the .vscode\\clarity.code-snippets file into a .vscode root folder on your repo. This will enable you to type note then \u0026lt;tab\u0026gt; then choose with up/down arrows which flavor notice you want, then \u0026lt;tab\u0026gt; again to provide a title, then \u0026lt;tab\u0026gt; to add your content!\nTo use the snippet, you need to first enable quickSuggestions for Markdown (one time only):\nGo to Preferences-\u0026gt;Settings then search for quickSuggestions Follow the link to Edit in settings.json Toward the bottom of the file, paste in the following JSON: 1\u0026#34;[markdown]\u0026#34;: { 2 \u0026#34;editor.quickSuggestions\u0026#34;: true 3 } Close and save the settings. ","link":"https://example.com/post/notices/","section":"post","tags":null,"title":"Using Notices"},{"body":"","link":"https://example.com/archives/","section":"","tags":null,"title":""},{"body":"","link":"https://example.com/tags/css/","section":"tags","tags":null,"title":"Css"},{"body":"","link":"https://example.com/tags/featured/","section":"tags","tags":null,"title":"Featured"},{"body":"","link":"https://example.com/tags/html/","section":"tags","tags":null,"title":"Html"},{"body":"","link":"https://example.com/tags/markdown/","section":"tags","tags":null,"title":"Markdown"},{"body":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nImages Local image, alt text as caption The following image is located within the Hugo site. Because it has alt text but no title text, the caption is generated by the alt text.\nRemote image, specified caption The following image is loaded from a remote URL. The alt text is the same (for screen readers and in cases when the image doesn't load) but because a separate title is provided, the title is used for the caption:\nThis is Jane Doe Image with alt text and no caption Alt text is always recommended for SEO, accessibility and in cases when images don't load. However, you don't necessarily always want an image to have a caption. In that case, use a title with one space:\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don't communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren't part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code Code Blocks Code block with backticks 1\u0026lt;!doctype html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5 \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;!-- this line is extraneous 2Error from server (Forbidden): deployments.apps is forbidden: User \u0026#34;chiptest\u0026#34; cannot create resource \u0026#34;deployments\u0026#34; in API group \u0026#34;apps\u0026#34; in the namespace \u0026#34;default\u0026#34; --\u0026gt; 11\u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo's internal highlight shortcode 1\u0026lt;!doctype html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3\u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; 5 \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; 6\u0026lt;/head\u0026gt; 7\u0026lt;body\u0026gt; 8 \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; 9\u0026lt;/body\u0026gt; 10\u0026lt;/html\u0026gt; List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL+ALT+Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nThe above quote is excerpted from Rob Pike's talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","link":"https://example.com/post/markdown-syntax/","section":"post","tags":["markdown","css","html","themes","featured"],"title":"Markdown Syntax Guide"},{"body":"","link":"https://example.com/categories/themes/","section":"categories","tags":null,"title":"Themes"},{"body":"","link":"https://example.com/tags/themes/","section":"tags","tags":null,"title":"Themes"},{"body":"","link":"https://example.com/tags/privacy/","section":"tags","tags":null,"title":"Privacy"},{"body":"Hugo ships with several Embedded Shortcodes for rich content, along with a Privacy Config and a set of Simple Shortcodes that enable static and no-JS versions of various social media embeds.\nInstagram Simple Shortcode YouTube Privacy Enhanced Shortcode X Simple Shortcode Owl bet you\u0026#39;ll lose this staring contest 🦉 pic.twitter.com/eJh4f2zncC\n\u0026mdash; San Diego Zoo Wildlife Alliance (@sandiegozoo) October 26, 2021 See shortcode documentation for more details.\nVimeo Simple Shortcode ","link":"https://example.com/post/rich-content/","section":"post","tags":["shortcodes","privacy"],"title":"Rich Content"},{"body":"","link":"https://example.com/tags/shortcodes/","section":"tags","tags":null,"title":"Shortcodes"},{"body":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","link":"https://example.com/post/placeholder-text/","section":"post","tags":["markdown","text"],"title":"Placeholder Text"},{"body":"","link":"https://example.com/tags/text/","section":"tags","tags":null,"title":"Text"},{"body":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/hooks/head-end.html Add these lines to the newly created partial: 1{{ if or .Params.math .Site.Params.math }} 2{{ partial \u0026#34;math.html\u0026#34; . }} 3{{ end }} To enable KaTeX globally set the parameter math to true in a project's configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Block math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$\n","link":"https://example.com/post/math-typesetting/","section":"post","tags":null,"title":"Math Typesetting"},{"body":"","link":"https://example.com/tags/emoji/","section":"tags","tags":null,"title":"Emoji"},{"body":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site's configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1.emoji { 2 font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; 3}","link":"https://example.com/post/emoji-support/","section":"post","tags":["emoji"],"title":"Emoji Support"},{"body":"Written in Go, Hugo is an open source static site generator available under the Apache Licence 2.0. Hugo supports TOML, YAML and JSON data file types, Markdown and HTML content files and uses shortcodes to add rich content. Other notable features are taxonomies, multilingual mode, image processing, custom output formats, HTML/CSS/JS minification and support for Sass SCSS workflows.\nHugo makes use of a variety of open source projects including:\nhttps://github.com/yuin/goldmark https://github.com/alecthomas/chroma https://github.com/muesli/smartcrop https://github.com/spf13/cobra https://github.com/spf13/viper Hugo is ideal for blogs, corporate websites, creative portfolios, online magazines, single page applications or even a website with thousands of pages.\nHugo is for people who want to hand code their own website without worrying about setting up complicated runtimes, dependencies and databases.\nWebsites built with Hugo are extremely fast, secure and can be deployed anywhere including, AWS, GitHub Pages, Heroku, Netlify and any other hosting provider.\nLearn more and contribute on GitHub.\n","link":"https://example.com/about/","section":"","tags":null,"title":"About"}]